{
	"info": {
		"_postman_id": "2901ce02-4e8c-4999-be8e-9390b56ac968",
		"name": "HW_pt.2",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "27682321"
	},
	"item": [
		{
			"name": "first",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//Проверить, что в body приходит правильный string\r",
							"pm.test(\"Body is correct\", function () {\r",
							"    pm.response.to.have.body(\"This is the first responce from server!ss\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{url}}/first",
					"host": [
						"{{url}}"
					],
					"path": [
						"first"
					]
				}
			},
			"response": []
		},
		{
			"name": "user_info_3",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//Спарсить response body в json\r",
							"let respData = pm.response.json();\r",
							"//Спарсить request.\r",
							"let reqData = request.data;\r",
							"\r",
							"//Вывести в консоль параметр family из response\r",
							"console.log(respData.family)\r",
							"\r",
							"\r",
							"//Проверить, что name в ответе равно name s request (name вбить руками)\r",
							"pm.test(\"check name\", function () {\r",
							"    pm.expect(respData.name).to.eql(\"Ivan\");\r",
							"});\r",
							"//Проверить, что age в ответе равно age s request (age вбить руками)\r",
							"pm.test(\"check age\", function () {\r",
							"    pm.expect(respData.age).to.eql(\"36\");\r",
							"});\r",
							"//Проверить, что salary в ответе равно salary s request (salary вбить руками)\r",
							"pm.test(\"check salary\", function () {\r",
							"    pm.expect(respData.salary).to.eql(995);\r",
							"});\r",
							"//Проверить, что name в ответе равно name s request (name забрать из request)\r",
							"pm.test(\"check name resp/req\", function () {\r",
							"    pm.expect(respData.name).to.eql(reqData.name);\r",
							"});\r",
							"//Проверить, что age в ответе равно age s request (age забрать из request)\r",
							"pm.test(\"check age resp/req equal\", function () {\r",
							"    pm.expect(respData.age).to.eql(reqData.age);\r",
							"});\r",
							"//Проверить, что salary в ответе равно salary s request (salary забрать из request)\r",
							"pm.test(\"check salary resp/req equal\", function () {\r",
							"    pm.expect(respData.salary).to.eql(+reqData.salary);\r",
							"});\r",
							"//Проверить что u_salary_1_5_year в ответе равно salary*4 (salary забрать из request)\r",
							"pm.test(\"check u_salary_1_5_year equal salary*4\", function () {\r",
							"    pm.expect(respData.family.u_salary_1_5_year).to.eql(reqData.salary*4);\r",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": "Ivan",
							"type": "text"
						},
						{
							"key": "age",
							"value": "36",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "995",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{url}}/user_info_3",
					"host": [
						"{{url}}"
					],
					"path": [
						"user_info_3"
					]
				}
			},
			"response": []
		},
		{
			"name": "object_info_3",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//Спарсить response body в json\r",
							"let respData = pm.response.json();\r",
							"//Спарсить request\r",
							"let reqData = pm.request.url.query.toObject();\r",
							"//Вывести в консоль параметр family из response\r",
							"console.log(respData.family)\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"//Проверить, что name в ответе равно name s request (name забрать из request)\r",
							"pm.test(\"check name resp/req\", function () {\r",
							"    pm.expect(respData.name).to.eql(reqData.name);\r",
							"});\r",
							"//Проверить, что age в ответе равно age s request (age забрать из request)\r",
							"pm.test(\"check age resp/req\", function () {\r",
							"    pm.expect(respData.age).to.eql(reqData.age);\r",
							"});\r",
							"//Проверить, что salary в ответе равно salary s request (salary забрать из request)\r",
							"pm.test(\"check salary resp/req\", function () {\r",
							"    pm.expect(respData.salary).to.eql(+reqData.salary);\r",
							"});\r",
							"//Проверить, что у параметра dog есть параметры name\r",
							"pm.test(\"check 'name' property from 'dog'\", function () {\r",
							"    pm.expect(respData.family.pets.dog).to.have.property(\"name\");\r",
							"});\r",
							"//Проверить, что у параметра dog есть параметры age\r",
							"pm.test(\"check 'age' property from 'dog'\", function () {\r",
							"    pm.expect(respData.family.pets.dog).to.have.property(\"age\");\r",
							"});\r",
							"//Проверить, что параметр name имеет значение Luky\r",
							"pm.test(\"check dog's name value\", function () {\r",
							"    pm.expect(respData.family.pets.dog.name).to.eql(\"Luky\");\r",
							"});\r",
							"//Проверить, что параметр age имеет значение 4\r",
							"pm.test(\"check dog's age value\", function () {\r",
							"    pm.expect(respData.family.pets.dog.age).to.eql(4);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": "Ivan",
							"type": "text",
							"disabled": true
						},
						{
							"key": "age",
							"value": "36",
							"type": "text",
							"disabled": true
						},
						{
							"key": "salary",
							"value": "995",
							"type": "text",
							"disabled": true
						}
					]
				},
				"url": {
					"raw": "{{url}}/object_info_3?name=Ivan&age=36&salary=995",
					"host": [
						"{{url}}"
					],
					"path": [
						"object_info_3"
					],
					"query": [
						{
							"key": "name",
							"value": "Ivan"
						},
						{
							"key": "age",
							"value": "36"
						},
						{
							"key": "salary",
							"value": "995"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "object_info_4",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//Спарсить response body в json\r",
							"let respData = pm.response.json();\r",
							"//Спарсить request\r",
							"let reqData = pm.request.url.query.toObject ();\r",
							"//Вывести в консоль параметр salary из request.\r",
							"//  console.log(reqData.salary)\r",
							"//Вывести в консоль параметр salary из response\r",
							"//  console.log(respData.salary)\r",
							"//Вывести в консоль 0-й элемент параметра salary из response\r",
							"// console.log(respData.salary[0])\r",
							"//Вывести в консоль 1-й элемент параметра salary из response\r",
							"// console.log(respData.salary[1])\r",
							"//Вывести в консоль 2-й элемент параметра salary из response\r",
							"// console.log(respData.salary[2])\r",
							"\r",
							"\r",
							"//Проверить, что name в ответе равно name s request (name забрать из request)\r",
							"pm.test(\"check name resp/req\", function () {\r",
							"    pm.expect(respData.name).to.eql(reqData.name);\r",
							"});\r",
							"//Проверить, что age в ответе равно age из request (age забрать из request)\r",
							"pm.test(\"check age resp/req\", function () {\r",
							"    pm.expect(respData.age).to.eql(+reqData.age);\r",
							"});\r",
							"//Проверить, что 0-й элемент параметра salary равен salary из request (salary забрать из request.)\r",
							"pm.test(\"check zero property of salary\", function () {\r",
							"    pm.expect(respData.salary[0]).to.eql(+reqData.salary);\r",
							"});\r",
							"//Проверить, что 1-й элемент параметра salary равен salary*2 из request (salary забрать из request)\r",
							"pm.test(\"check first property of salary\", function () {\r",
							"    pm.expect(+respData.salary[1]).to.eql(+reqData.salary*2);\r",
							"});\r",
							"//Проверить, что 2-й элемент параметра salary равен salary*3 из request (salary забрать из request)\r",
							"pm.test(\"check second property of salary\", function () {\r",
							"    pm.expect(+respData.salary[2]).to.eql(+reqData.salary*3);\r",
							"});\r",
							"//Создать в окружении переменную name\r",
							"pm.environment.set(\"name\", \"Ivan\");\r",
							"//Создать в окружении переменную age\r",
							"pm.environment.set(\"age\", 36);\r",
							"//Создать в окружении переменную salary\r",
							"pm.environment.set(\"salary\", \"995\");\r",
							"//Написать цикл который выведет в консоль по порядку элементы списка из параметра salary\r",
							"// for (salary of respData.salary) {\r",
							"//     console.log(salary)\r",
							"// }\r",
							"for (let a = 0; a < respData.salary.length; a++){\r",
							"\tconsole.log(respData.salary[a]) \r",
							"}"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{url}}/object_info_4?name=Ivan&age=36&salary=995",
					"host": [
						"{{url}}"
					],
					"path": [
						"object_info_4"
					],
					"query": [
						{
							"key": "name",
							"value": "Ivan"
						},
						{
							"key": "age",
							"value": "36"
						},
						{
							"key": "salary",
							"value": "995"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "user_info_2",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//Вставить параметр salary из окружения в request\r",
							"pm.environment.get(\"variable_key\");\r",
							"//Вставить параметр age из окружения в age\r",
							"//Вставить параметр name из окружения в name\r",
							"//Отправить запрос\r",
							"//Спарсить response body в json\r",
							"let respData = pm.response.json();\r",
							"//Спарсить request\r",
							"let reqData = request.data;\r",
							"//Проверить, что json response имеет параметр start_qa_salary\r",
							"let salary0 = respData.start_qa_salary;\r",
							"pm.test(\"check resp property 'start_qa_salary'\", function () {\r",
							"    pm.expect(respData).to.have.property(\"start_qa_salary\");\r",
							"});\r",
							"console.log(\"start salary===\", salary0);\r",
							"//Проверить, что json response имеет параметр qa_salary_after_6_months\r",
							"let salary1 = respData.qa_salary_after_6_months;\r",
							"pm.test(\"check resp property 'qa_salary_after_6_months'\", function () {\r",
							"    pm.expect(respData).to.have.property(\"qa_salary_after_6_months\");\r",
							"});\r",
							"console.log(\"after_6_months==\", salary1);\r",
							"//Проверить, что json response имеет параметр qa_salary_after_12_months\r",
							"let salary2 = respData.qa_salary_after_12_months;\r",
							"pm.test(\"check resp property 'qa_salary_after_12_months'\", function () {\r",
							"    pm.expect(respData).to.have.property(\"qa_salary_after_12_months\");\r",
							"});\r",
							"console.log(\"after_12_months==\", salary2);\r",
							"//Проверить, что json response имеет параметр qa_salary_after_1.5_year\r",
							"let salary3 = respData[\"qa_salary_after_1.5_year\"];\r",
							"pm.test(\"check resp property 'qa_salary_after_1.5_year'\", function () {\r",
							"    pm.expect(respData).to.have.property(\"qa_salary_after_1.5_year\");\r",
							"});\r",
							"console.log(\"after_1.5_year==\", salary3);\r",
							"//Проверить, что json response имеет параметр qa_salary_after_3.5_years\r",
							"let salary4 = respData[\"qa_salary_after_3.5_years\"];\r",
							"pm.test(\"check resp property 'qa_salary_after_3.5_years'\", function () {\r",
							"    pm.expect(respData).to.have.property(\"qa_salary_after_3.5_years\");\r",
							"});\r",
							"console.log(\"after_3.5_years==\", salary4);\r",
							"//Проверить, что json response имеет параметр person\r",
							"let person = respData.person;\r",
							"console.log(\"person==\", person);\r",
							"pm.test(\"check resp property 'person'\", function () {\r",
							"    pm.expect(respData).to.have.property(\"person\");\r",
							"});\r",
							"//Проверить, что параметр start_qa_salary равен salary из request (salary забрать из request)\r",
							"pm.test(\"check 'start_qa_salary'=reqSalary\", function () {\r",
							"    pm.expect(salary0).to.eql(+reqData.salary);\r",
							"});\r",
							"//Проверить, что параметр qa_salary_after_6_months равен salary*2 из request (salary забрать из request)\r",
							"pm.test(\"check 'qa_salary_after_6_months'=reqSalary*2\", function () {\r",
							"    pm.expect(salary1).to.eql(+reqData.salary*2);\r",
							"});\r",
							"//Проверить, что параметр qa_salary_after_12_months равен salary*2.7 из request (salary забрать из request)\r",
							"pm.test(\"check 'qa_salary_after_12_months'=reqSalary*2.7\", function () {\r",
							"    pm.expect(salary2).to.eql(+reqData.salary*2.7);\r",
							"});\r",
							"//Проверить, что параметр qa_salary_after_1.5_year равен salary*3.3 из request (salary забрать из request)\r",
							"pm.test(\"check 'qa_salary_after_1.5_year' = reqSalary*3.3\", function () {\r",
							"\tpm.expect(salary3).to.eql(+reqData.salary*3.3);\r",
							"});\r",
							"//Проверить, что параметр qa_salary_after_3.5_years равен salary*3.8 из request (salary забрать из request)\r",
							"pm.test(\"check 'qa_salary_after_3.5_years'\", function () {\r",
							"    pm.expect(salary4).to.eql(+reqData.salary*3.8);\r",
							"});\r",
							"//Проверить, что в параметре person, 1-й элемент из u_name равен salary из request (salary забрать из request)\r",
							"pm.test(\"check respData.person.u_name[1] = reqSalary\", function () {\r",
							"    pm.expect(respData.person.u_name[1]).to.eql(+reqData.salary);\r",
							"});\r",
							"//Проверить, что что параметр u_age равен age из request (age забрать из request.)\r",
							"pm.test(\"check respData.person.u_age = reqData.age\", function () {\r",
							"    pm.expect(respData.person.u_age).to.eql(+reqData.age);\r",
							"});\r",
							"//Проверить, что параметр u_salary_5_years равен salary*4.2 из request (salary забрать из request.)\r",
							"let salary5_years = respData.person.u_salary_5_years;\r",
							"pm.test(\"check respData.person.u_salary_5_years = reqSalary*4.2\", function () {\r",
							"    pm.expect(salary5_years).to.eql(+reqData.salary*4.2);\r",
							"});\r",
							"// //Написать цикл который выведет в консоль по порядку элементы списка из параметра person.\r",
							"for (let a in respData.person){\r",
							"   console.log(\"elements from 'person'==\", respData.person[a]) \r",
							"}"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": "{{name}}",
							"type": "text"
						},
						{
							"key": "age",
							"value": "{{age}}",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "{{salary}}",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{url}}/user_info_2",
					"host": [
						"{{url}}"
					],
					"path": [
						"user_info_2"
					]
				}
			},
			"response": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					"pm.test(\"Status code is 200\", function () {",
					"    pm.response.to.have.status(200);",
					"});"
				]
			}
		}
	],
	"variable": [
		{
			"key": "variable_key",
			"value": ""
		}
	]
}